import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ConnectException;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;

public class Heartbeat extends Thread {


	public  Heartbeat(){
	}

	public void run() {
		while (true) {
			try {
				Thread.sleep(8000);
			} catch(InterruptedException ex) {
				Thread.currentThread().interrupt();
			}

			JSONObject HBMessage = new JSONObject();
			HBMessage.put("type", "heartbeat");

			JSONParser parser = new JSONParser();

			ArrayList<ServerInfo> serverInfos = new ArrayList<>(Server.serverList);
			for (ServerInfo serverInfo : serverInfos) {
				String serverId = serverInfo.getServerId();
				if (!(serverId.equals("central")) && (!(serverId.equals(server.currentServerId)))){

					String hostName = serverInfo.getServerAddress();
					int serverPort = serverInfo.getServersPort();

					sslSocket sslSocket = null;
					try{
						sslSocketFactory sslSocketfactory = (sslSocketFactory) sslSocketFactory.getDefault();
						sslSocket = (sslSocket) sslSocketfactory.createSocket(hostName, serverPort);

						DataInputStream input = new DataInputStream(sslSocket.getInputStream());
						DataOutputStream output =new DataOutputStream(sslSocket.getOutputStream());

						output.write((HBMessage.toJSONString() + "\n").getBytes("UTF-8"));
						output.flush();

						sslSocket.setSoTimeout(8000);
						JSONObject message;
						message = (JSONObject) parser.parse(input.readLine());
						Boolean isWorking = Boolean.valueOf(String.valueOf(message.get("working")));

						if(!isWorking){
							server.deleteServer(serverId);
						}

					} catch (Exception e) {
						server.deleteServer(serverId);
					} finally {
						if (sslSocket != null) {
							try {
								sslSocket.close();
							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		}
	}
}