package server.state;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import server.config.Config;

public class ServerState {

	private static ServerState instance;
	private Config config;
	private List<ServerInfo> serverInfoList;
	private Map<String,UserInfo> userInfoMap;
	private Map<String,String> lockedUserSet;
	private Map<String,LocalChatroomInfo> localChatroomInfoMap;
	private Map<String,RemoteChatroomInfo> remoteChatroomInfoMap;
	private Map<String,String> lockedChatroomSet;
	private Map<String,Map<String,String>> chatroomVoteSet;
	private Map<String,Map<String,String>> userInfoVoteSet;

	private ServerState() {
		serverInfoList = new ArrayList<>();
		userInfoMap = new HashMap<String,UserInfo>();
		localChatroomInfoMap = new HashMap<String,LocalChatroomInfo>();
		remoteChatroomInfoMap = new HashMap<String,RemoteChatroomInfo>();
		lockedChatroomSet = new HashMap<String,String>();
		lockedUserSet = new HashMap<String,String>();
		chatroomVoteSet = new HashMap<String,Map<String,String>>();
		userInfoVoteSet = new HashMap<String,Map<String,String>>();
	}

	public static synchronized ServerState getInstance() {
		if(instance == null) {
			instance = new ServerState();
		}
		return instance;
	}

	public Config getConfig() {
		return config;
	}

	public void setConfig(Config config) {
		this.config = config;
	}

	public List<ServerInfo> getServerInfoList() {
		return serverInfoList;
	}

	public void setServerInfoList(List<ServerInfo> serverInfoList) {
		this.serverInfoList = serverInfoList;
	}

	public Map<String,UserInfo> getUserInfoMap() {
		return userInfoMap;
	}

	public void setUserInfoMap(Map<String,UserInfo> userInfoMap) {
		this.userInfoMap = userInfoMap;
	}

	public Map<String,String> getLockedUserSet() {
		return lockedUserSet;
	}

	public void setLockedUserSet(Map<String,String> lockedUserSet) {
		this.lockedUserSet = lockedUserSet;
	}

	public Map<String,LocalChatroomInfo> getLocalChatroomInfoMap() {
		return localChatroomInfoMap;
	}

	public void setLocalChatroomInfoMap(Map<String,LocalChatroomInfo> localChatroomInfoMap) {
		this.localChatroomInfoMap = localChatroomInfoMap;
	}

	public Map<String,RemoteChatroomInfo> getRemoteChatroomInfoMap() {
		return remoteChatroomInfoMap;
	}

	public void setRemoteChatroomInfoMap(Map<String,RemoteChatroomInfo> remoteChatroomInfoMap) {
		this.remoteChatroomInfoMap = remoteChatroomInfoMap;
	}

	public Map<String,String> getLockedChatroomSet() {
		return lockedChatroomSet;
	}

	public void setLockedChatroomSet(Map<String,String> lockedChatroomSet) {
		this.lockedChatroomSet = lockedChatroomSet;
	}

	public Map<String,Map<String,String>> getChatroomVoteSet() {
		return chatroomVoteSet;
	}

	public void setChatroomVoteSet(Map<String,Map<String,String>> chatroomVoteSet) {
		this.chatroomVoteSet = chatroomVoteSet;
	}

	public Map<String,Map<String,String>> getUserInfoVoteSet() {
		return userInfoVoteSet;
	}

	public void setUserInfoVoteSet(Map<String,Map<String,String>> userInfoVoteSet) {
		this.userInfoVoteSet = userInfoVoteSet;
	}

	public void addUser(UserInfo userInfo) {
		userInfoMap.put(userInfo.getIdentity(),userInfo);
	}

	public void deleteUser(String identity) {
		userInfoMap.remove(identity);
	}

	public void addRemoteChatroomInfo(RemoteChatroomInfo remoteChatroomInfo) {
		remoteChatroomInfoMap.put(remoteChatroomInfo.getChatroomId(),remoteChatroomInfo);
	}

	public void deleteRemoteChatroomInfo(String chatroomId) {
		remoteChatroomInfoMap.remove(chatroomId);
	}

	public void addLocalChatroomInfo(LocalChatroomInfo localChatroomInfo) {
		localChatroomInfoMap.put(localChatroomInfo.getChatroomId(),localChatroomInfo);
	}

	public void deleteLocalChatroomInfo(String chatroomId) {
		localChatroomInfoMap.remove(chatroomId);
	}

	public void addLockedChatroom(String lockedChatroom,String serverid) {
		lockedChatroomSet.add((Map<String,String>)new HashMap<String,String>(lockedChatroom,serverid));
	}

	public void deleteLockedChatroom(String lockedChatroom) {
		lockedChatroomSet.remove(lockedChatroom);
	}

	public void addLockedUser(String lockedUser) {
		lockedUserSet.add(lockedUser);
	}

	public void deleteLockedUser(String lockedUser) {
		lockedUserSet.remove(lockedUser);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public synchronized void addChatroomVote(String lockidentity,String serverid,String vote) {
		Map<String,String> chatroomVoteMap=chatroomVoteSet.get(lockidentity);
		if(chatroomVoteMap!=null){
			if(!chatroomVoteMap.containsKey(serverid)){
				chatroomVoteMap.put(serverid, vote);
				chatroomVoteSet.replace(lockidentity, chatroomVoteMap);
			}
		}else{
			chatroomVoteSet.put(lockidentity,(Map<String, String>) new HashMap().put(serverid, vote));
		}
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public synchronized void addUserInfoVoteSet(String lockidentity,String serverid,String vote) {
		Map<String,String> userInfoVoteMap=userInfoVoteSet.get(lockidentity);
		if(userInfoVoteMap!=null){
			if(!userInfoVoteMap.containsKey(serverid)){
				userInfoVoteMap.put(serverid, vote);
				userInfoVoteSet.replace(lockidentity, userInfoVoteMap);
			}
		}else{
			userInfoVoteSet.put(lockidentity,(Map<String, String>) new HashMap().put(serverid, vote));
		}
	}
}
