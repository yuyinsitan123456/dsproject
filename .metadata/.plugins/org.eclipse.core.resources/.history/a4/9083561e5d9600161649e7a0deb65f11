package au.edu.unimelb.tcp.client;

import java.io.IOException;

import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;
import org.kohsuke.args4j.CmdLineException;
import org.kohsuke.args4j.CmdLineParser;

public class Client {

	public static void main(String[] args) throws IOException, ParseException {
		
		System.setProperty("javax.net.ssl.trustStore", "D://DS.jks");
		
		System.setProperty("javax.net.debug","all");
		SSLSocket socket = null;
		String name = null;
		String password = null;
		String identity = null;
		boolean debug = false;
		try {
			//load command line args
			ComLineValues values = new ComLineValues();
			CmdLineParser parser = new CmdLineParser(values);
			try {
				parser.parseArgument(args);
				String hostname = values.getHost();
				name = values.getName();
				password = values.getPassword();
				identity= values.getIdeneity();
				int port = values.getPort();
				debug = values.isDebug();
				SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
				socket = (SSLSocket) sslsocketfactory.createSocket(hostname, port);
				JSONObject sendToServer = new JSONObject();
				sendToServer = ClientMessages.getLoginRequest(name,password); 
				out.write((sendToServer.toJSONString() + "\n").getBytes("UTF-8"));
				out.flush();
				if (type.equals("login")) {
					String address = (String)message.get("address");
					boolean approved = Boolean.parseBoolean((String)message.get("approved"));
					int port = Integer.parseInt((String)message.get("port"));
					String ticket = (String)message.get("ticket");
					if(approved){
						SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
						SSLSocket temp_socket = (SSLSocket) sslsocketfactory.createSocket(address, port);
					}
					return;
				}
				
				
			} catch (CmdLineException e) {
				e.printStackTrace();
			}
			
			State state = new State(identity, "");
			
			// start sending thread
			MessageSendThread messageSendThread = new MessageSendThread(socket, state, debug);
			Thread sendThread = new Thread(messageSendThread);
			sendThread.start();
			
			// start receiving thread
			Thread receiveThread = new Thread(new MessageReceiveThread(socket, state, messageSendThread, debug));
			receiveThread.start();
			
		} catch (IOException e) {
			System.out.println("Communication Error: " + e.getMessage());
		}
	}
}
