package server;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import server.state.Message;
import server.state.ServerState;

public class AuthorizeServer {

	public static void main(String[] args) throws IOException {

		int serversPort = 4444;
		BufferedReader in;
		BufferedWriter out;
		JSONParser parser = new JSONParser();
		// Read configuration in the config file
		SSLServerSocket listeningServerSocket = null;
		//Specify the keystore details (this can be specified as VM arguments as well)
		//the keystore file contains an application's own certificate and private key
		//keytool -genkey -keystore <keystorename> -keyalg RSA
		System.setProperty("javax.net.ssl.keyStore","D:\\DS.jks");
		//Password to access the private key from the keystore file
		System.setProperty("javax.net.ssl.keyStorePassword","888888");

		// Enable debugging to view the handshake and communication which happens between the SSLClient and the SSLServer
		System.setProperty("javax.net.debug","all");

		try {
			// Create a server socket listening on given port
			//Create SSL server socket
			SSLServerSocketFactory sslserversocketfactory = (SSLServerSocketFactory) SSLServerSocketFactory
					.getDefault();

			listeningServerSocket = (SSLServerSocket) sslserversocketfactory.createServerSocket(serversPort);
			SSLSocket serverSocket =null;
			while (true) {

				//Accept an incoming client connection request
				//Accept client connection
				serverSocket = (SSLSocket) listeningServerSocket.accept();
				System.out.println(Thread.currentThread().getName() 
						+ " - server conection accepted");
				in = new BufferedReader(new InputStreamReader(serverSocket.getInputStream(), "UTF-8"));
				out = new BufferedWriter(new OutputStreamWriter(serverSocket.getOutputStream(), "UTF-8"));
				MessageReceive(out,(JSONObject)parser.parse(in.readLine()));
				out.close();
				in.close();
				serverSocket.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(listeningServerSocket != null) {
				try {
					listeningServerSocket.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public static void MessageReceive(BufferedWriter out,JSONObject message) throws IOException {
		String type = (String)message.get("type");
		if(type.equals("serverList")) {
			String serverid = (String) message.get("serverid");
			String serversAddress=(String) message.get("serversAddress");
			int serversPort = (int) message.get("serversPort");
			int coordinationPort = (int) message.get("coordinationPort");
			AuthorizeServerState.getInstance().addServerInfo(new CurrentServerInfo(serverid, serversAddress, serversPort, coordinationPort));
			JSONObject mas=new Message().getServerList();
			out.write((mas.toJSONString() + "\n"));
			out.flush();
		}else{
			String name = (String) message.get("name");
			String password = (String) message.get("password");
			AvailableUserInfo availableUserInfo = new AvailableUserInfo("a","a");
			if(name.equals(availableUserInfo.getName())&&password.equals(availableUserInfo.getPassword())){
				JSONObject mas=new Message().getUserAuthorizeSuccess();
				out.write((mas.toJSONString() + "\n"));
				out.flush();
			}else{
				JSONObject mas=new Message().getUserAuthorizeFail();
				out.write((mas.toJSONString() + "\n"));
				out.flush();
			}
		}
	}
}
