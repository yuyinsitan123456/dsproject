package server;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;

import server.config.Config;
import server.config.ConfigLoader;
import server.state.ManagingThread;
import server.state.MessageSendThread;

public class Server extends Thread  {

	private ServerSocket listeningServerSocket;
	private BufferedReader in;
	private BufferedWriter out;

	public Server(ServerSocket serverSocket) {
		try {
			this.listeningServerSocket = serverSocket;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	@Override
	public void run() {
		Socket socket=null;
		try {
			String serverid = null;
			String serversAddress=null;
			int serversPort = 4444;
			int coordinationPort = 3333;

			// Read configuration in the config file
			Config config = ConfigLoader.loadConfig(serverid,serversAddress,serversPort,coordinationPort);
			SSLServerSocket listeningServerSocket = null;
			SSLServerSocket listeningClientSocket =null;
			//Specify the keystore details (this can be specified as VM arguments as well)
			//the keystore file contains an application's own certificate and private key
			//keytool -genkey -keystore <keystorename> -keyalg RSA
			System.setProperty("javax.net.ssl.keyStore","D:\\DS.jks");
			//Password to access the private key from the keystore file
			System.setProperty("javax.net.ssl.keyStorePassword","888888");

			// Enable debugging to view the handshake and communication which happens between the SSLClient and the SSLServer
			System.setProperty("javax.net.debug","all");

			try {
				serversPort =config.getClientsPort();
				coordinationPort = config.getCoordinationPort();
				// Create a server socket listening on given port
				//Create SSL server socket
				SSLServerSocketFactory sslserversocketfactory = (SSLServerSocketFactory) SSLServerSocketFactory
						.getDefault();
				listeningClientSocket = (SSLServerSocket) sslserversocketfactory.createServerSocket(serversPort);

				listeningServerSocket = (SSLServerSocket) sslserversocketfactory.createServerSocket(coordinationPort);
				ServerListening ServerListening = new ServerListening(listeningServerSocket);
				ServerListening.start(); 

				while (true) {

					//Accept an incoming client connection request
					//Accept client connection
					SSLSocket clientSocket = (SSLSocket) listeningClientSocket.accept();

					MessageSendThread messageSendThread = new MessageSendThread(clientSocket);
					messageSendThread.start();
					ManagingThread managingThread = new ManagingThread(clientSocket,messageSendThread);
					managingThread.start();
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if(listeningClientSocket != null) {
					try {
						listeningClientSocket.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
				if(listeningServerSocket != null) {
					try {
						listeningServerSocket.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}
		}finally {
			try {
				if(this.in!=null)
					this.in.close();
				if(this.out!=null)
					this.out.close();
				if(this.listeningServerSocket!=null)
					this.listeningServerSocket.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
}
